<!--
* "MainWindow.xaml" - Design for MainWindow
* Copyright (C) 2021 Nicholas Logozzo
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>.
-->

<Window x:Class="NickvisionMusic.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        xmlns:fluent="urn:fluent-ribbon"
        xmlns:nv="clr-namespace:NickvisionMusic.Controls"
        xmlns:local="clr-namespace:NickvisionMusic.Views"
        mc:Ignorable="d" Title="{Binding Title}" Icon="../Resources/icon.ico" ui:WindowHelper.UseModernWindowStyle="True"
        Name="Windows" Width="800" Height="600" WindowState="Maximized">
    <Window.InputBindings>
        
    </Window.InputBindings>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing" SourceObject="{Binding ElementName=Window}">
            <i:InvokeCommandAction Command="{Binding ExitCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <fluent:Ribbon HorizontalAlignment="Stretch" VerticalAlignment="Top" FontSize="12" CanMinimize="False" Background="Transparent">
            <fluent:Ribbon.Menu>
                <fluent:Backstage>
                    <fluent:BackstageTabControl>
                        <fluent:Button Header="Exit" Icon="../Resources/Exit.png" ToolTip="Alt+F4" Command="{Binding ExitCommand}"/>
                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>

            <fluent:RibbonTabItem Header="Home">
                <fluent:RibbonGroupBox Header="Music Control">
                    <nv:MediaPositionTracker Position="{Binding MusicPlayer.Position, Mode=TwoWay}" PositionString="{Binding MusicPlayer.PositionString}" Duration="{Binding MusicPlayer.Duration}" DurationString="{Binding MusicPlayer.DurationString}"/>
                    <fluent:Button Header="Previous" LargeIcon="../Resources/Previous.png" Command="{Binding PreviousCommand}"/>
                    <fluent:Button Header="Play" LargeIcon="../Resources/Play.png" Command="{Binding PlayCommand}"/>
                    <fluent:Button Header="Pause" LargeIcon="../Resources/Pause.png" Command="{Binding PauseCommand}"/>
                    <fluent:Button Header="Stop" LargeIcon="../Resources/Stop.png" Command="{Binding StopCommand}"/>
                    <fluent:Button Header="Next" LargeIcon="../Resources/Next.png" Command="{Binding NextCommand}"/>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="Player">
                    <fluent:Button Header="15 Seconds Back" LargeIcon="../Resources/15Back.png" Command="{Binding FifteenSecondsBackCommand}"/>
                    <fluent:ToggleButton Header="Shuffle" LargeIcon="../Resources/Shuffle.png" IsChecked="{Binding MusicPlayer.IsShuffle}"/>
                    <fluent:ToggleButton Header="Repeat" LargeIcon="../Resources/Repeat.png" IsChecked="{Binding MusicPlayer.IsRepeat}"/>
                    <fluent:DropDownButton Header="Volume" LargeIcon="../Resources/Volume.png">
                        <Slider Orientation="Vertical" Height="100" AutoToolTipPlacement="TopLeft" Minimum="0" Maximum="100" TickFrequency="10" IsSnapToTickEnabled="True" Value="{Binding MusicPlayer.Volume}"/>
                    </fluent:DropDownButton>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem Header="Settings">
                <fluent:RibbonGroupBox Header="Music">
                    <fluent:Button Header="Reload Library" LargeIcon="../Resources/Reload.png" Command="{Binding ReloadLibraryCommand}"/>
                    <fluent:Button Header="Edit Music Sources" LargeIcon="../Resources/MusicFolder.png" Command="{Binding EditMusicSourcesCommand}"/>
                </fluent:RibbonGroupBox>
                
                <fluent:RibbonGroupBox Header="Theme">
                    <fluent:ToggleButton Header="Light Theme" LargeIcon="../Resources/Light.png" IsChecked="{Binding IsLightTheme}"/>
                    <fluent:ToggleButton Header="Dark Theme" LargeIcon="../Resources/Dark.png" IsChecked="{Binding IsDarkTheme}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem Header="Help">
                <fluent:RibbonGroupBox Header="Actions">
                    <fluent:Button Header="Check For Updates" LargeIcon="../Resources/Update.png" Command="{Binding CheckForUpdatesCommand}"/>
                    <fluent:Button Header="Report A Bug" LargeIcon="../Resources/Bug.png" Command="{Binding ReportABugCommand}"/>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="About">
                    <fluent:Button Header="Changelog" LargeIcon="../Resources/Changelog.png" Command="{Binding ChangelogCommand}"/>
                    <fluent:Button Header="About" LargeIcon="../Resources/About.png" Command="{Binding AboutCommand}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,124,0,24">
            <DataGrid Name="listMusicFiles" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,0" AutoGenerateColumns="False" IsReadOnly="True" SelectionMode="Single" GridLinesVisibility="Horizontal" 
                      CanUserSortColumns="True" ui:DataGridHelper.UseModernColumnStyles="True" ItemsSource="{Binding MusicPlayer.AllMusicFiles}" SelectedItem="{Binding MusicPlayer.Source, Mode=OneWay}" SelectionChanged="listMusicFiles_SelectionChanged">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Filename" Binding="{Binding Filename}"/>
                    <DataGridTextColumn Header="Title" Binding="{Binding Title}"/>
                    <DataGridTextColumn Header="Artist" Binding="{Binding Artist}"/>
                    <DataGridTextColumn Header="Album" Binding="{Binding Album}"/>
                    <DataGridTextColumn Header="Genre" Binding="{Binding Genre}"/>
                    <DataGridTextColumn Header="Duration" Binding="{Binding DurationAsString}"/>
                    <DataGridTextColumn Header="Path" Binding="{Binding Path}"/>
                </DataGrid.Columns>

                <DataGrid.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding PlayCommand}" CommandParameter="{Binding ElementName=listMusicFiles, Path=SelectedItem}"/>
                </DataGrid.InputBindings>
            </DataGrid>
        </Grid>

        <fluent:StatusBar HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
            <fluent:StatusBarItem HorizontalAlignment="Left" Margin="4,0,0,0" FontSize="12">
                <fluent:StatusBarItem.Content>
                    <TextBlock>
                        <Run Text="Song Playing: "/>
                        <Run Text="{Binding MusicPlayer.Source.Filename, Mode=OneWay}"/>
                    </TextBlock>
                </fluent:StatusBarItem.Content>
            </fluent:StatusBarItem>
        </fluent:StatusBar>
    </Grid>
</Window>
